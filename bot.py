from healthcheck import run as healthcheck_run
# –ó–∞–ø—É—Å–∫ HTTP-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Uptime-–ø–∏–Ω–≥–æ–≤
healthcheck_run()

import os
import asyncio
import logging
from html import escape
import textwrap

from dotenv import load_dotenv
from aiogram import Bot, Dispatcher, F
from aiogram.client.default import DefaultBotProperties
from aiogram.types import (
    Message,
    CallbackQuery,
    FSInputFile,
    InlineKeyboardButton as KB,
    InlineKeyboardMarkup as KBM,
    BotCommand
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.exceptions import TelegramRetryAfter, TelegramForbiddenError

# Load environment
load_dotenv()
BOT_TOKEN = os.getenv("BOT_TOKEN")
CHANNEL_ID = int(os.getenv("CHANNEL_ID"))
ADMIN_IDS = {int(i) for i in os.getenv("ADMIN_IDS").split(",")}
GIFT_URL = os.getenv("GIFT_URL")
IMAGE_DIR = os.path.join(os.getcwd(), "images")

# Text constants
WELCOME_TEMPLATE = (
    "–ü—Ä–∏–≤–µ—Ç, <b>{name}</b>! üëã\n\n"
    "–ú–µ–Ω—è –∑–æ–≤—É—Ç –ü–æ–ª–∏–Ω–∞, —è –ø–æ–º–æ–≥–∞—é —ç–∫—Å–ø–µ—Ä—Ç–∞–º –∏ –ø—Ä–µ–¥–ø—Ä–∏–Ω–∏–º–∞—Ç–µ–ª—è–º —É–ø–∞–∫–æ–≤—ã–≤–∞—Ç—å —Å—É—Ç—å –±–∏–∑–Ω–µ—Å–∞"
    " –≤ –∞–∫–∫—É—Ä–∞—Ç–Ω—ã–π –∏ –∑–∞–º–µ—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç.\n\n"
    "–í —ç—Ç–æ–º –±–æ—Ç–µ —è —Å–æ–±—Ä–∞–ª–∞ –ø–æ–ª–µ–∑–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º –ø—Ä–æ–∫–∞—á–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É —Å–≤–æ–µ–≥–æ –±–∏–∑–Ω–µ—Å–∞.\n\n"
    "–í –º–µ–Ω—é –Ω–∏–∂–µ –∑–∞–±–∏—Ä–∞–π—Ç–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∏ –∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —É—Å–ª—É–≥–∞–º–∏!üëá"
)

GIFT_TEMPLATE = (
    "<b>{name}</b>, —è –ø–æ–¥–≥–æ—Ç–æ–≤–∏–ª–∞ –ø–æ–¥–∞—Ä–æ–∫ –≥–∞–π–¥ <u><b><i>¬´–ö–∞–∫ —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–¥—É–º–∞–Ω–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤¬ª.</i></b></u>\n\n"
    "‚ú®<b><u><i>–ß—Ç–æ –Ω–∞–π–¥—ë—Ç–µ –≤ –≥–∞–π–¥–µ:</i></u></b>\n"
    "‚Äî —Ä–∞–∑–±–æ—Ä, —á—Ç–æ —Ç–∞–∫–æ–µ —É–ø–∞–∫–æ–≤–∫–∞ –∏ –∑–∞—á–µ–º –æ–Ω–∞ –Ω—É–∂–Ω–∞;\n"
    "‚Äî —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Å–∞–π—Ç–∞ –∏ —Å–æ—Ü—Å–µ—Ç–µ–π, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–Ω—è—Ç–Ω–∞ —Å –ø–µ—Ä–≤–æ–≥–æ —ç–∫—Ä–∞–Ω–∞;\n"
    "‚Äî —Ç–∏–ø–æ–≤—ã–µ –æ—à–∏–±–∫–∏, –º–µ—à–∞—é—â–∏–µ —É–ø–∞–∫–æ–≤–∫–µ —Ä–∞–±–æ—Ç–∞—Ç—å;\n"
    "‚Äî –Ω–∞–≥–ª—è–¥–Ω—É—é —Å—Ö–µ–º—É –≤–æ—Ä–æ–Ω–∫–∏ –ø—Ä–æ–¥–∞–∂: –æ—Ç –∏–Ω—Ç–µ—Ä–µ—Å–∞ –¥–æ –∑–∞—è–≤–∫–∏;\n"
    "‚Äî —Ñ–∏–Ω–∞–ª—å–Ω—ã–π —á–µ–∫-–ª–∏—Å—Ç, –ø–æ–º–æ–≥–∞—é—â–∏–π –≤—ã—è–≤–∏—Ç—å —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞.\n\n"
    "<b><u><i>–ü–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –ø–æ –∫–Ω–æ–ø–∫–µ, —á—Ç–æ–±—ã —á–∏—Ç–∞—Ç—å –≥–∞–π–¥</i></u></b> üëá"
)

SUBSCRIBE_PROMPT = "–°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª üëá"
COURSE_TEXT = "‚ö°Ô∏è –ú–∏–Ω–∏-–∫—É—Ä—Å —Å—Ç–∞—Ä—Ç—É–µ—Ç —Å–∫–æ—Ä–æ. –ù–µ –≤—ã–∫–ª—é—á–∞–π—Ç–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ –±–æ—Ç–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∑–∞–ø—É—Å–∫!"

SERVICES_HEADER = "<b>–ß–µ–º –º–æ–≥—É –±—ã—Ç—å –ø–æ–ª–µ–∑–Ω–∞:</b>\n"
SERVICES_ITEMS = [
    "‚û°Ô∏è –õ–µ–Ω–¥–∏–Ω–≥–∏ –∏ –º–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω—ã–µ —Å–∞–π—Ç—ã –Ω–∞ Tilda / Taplink",
    "‚û°Ô∏è –†–µ–¥–∏–∑–∞–π–Ω –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∞–π—Ç–æ–≤",
    "‚û°Ô∏è –°–∞–π—Ç—ã-–≤–∏–∑–∏—Ç–∫–∏ –¥–ª—è —ç–∫—Å–ø–µ—Ä—Ç–æ–≤ –∏ –∫–æ–º–ø–∞–Ω–∏—è–º",
    "‚û°Ô∏è –î–∏–∑–∞–π–Ω –∏ –≤–µ—Ä—Å—Ç–∫–∞ –ø—Ä–∏–≥–ª–∞—à–µ–Ω–∏–π –Ω–∞ –ª—é–±—ã–µ –º–µ—Ä–æ–ø—Ä–∏—è—Ç–∏—è",
    "‚û°Ô∏è –ò–Ω—Ñ–æ–≥—Ä–∞—Ñ–∏–∫–∞ –∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏ –¥–ª—è –±–∏–∑–Ω–µ—Å–∞",
    "‚û°Ô∏è –û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∏ –≤–µ–¥–µ–Ω–∏–µ Pinterest-–ø—Ä–æ—Ñ–∏–ª–µ–π",
]
SERVICES_FOOTER = (
    "\n\n<i>–°–≤—è–∂–∏—Ç–µ—Å—å —Å–æ –º–Ω–æ–π –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö @Polina_Alex ‚Äî –æ–±—Å—É–¥–∏–º, –∫–∞–∫ –ª—É—á—à–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏—Ç—å –≤–∞—à –ø—Ä–æ–µ–∫—Ç.</i>"
)

# Keyboards
inline_main_kb = KBM(inline_keyboard=[
    [KB(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫", callback_data="gift")],
    [KB(text="üìö –ú–∏–Ω–∏-–∫—É—Ä—Å", callback_data="course")],
    [KB(text="üíº –£—Å–ª—É–≥–∏", callback_data="services")]
])

gift_kb = KBM(inline_keyboard=[
    [KB(text="üéÅ –°–∫–∞—á–∞—Ç—å –≥–∞–π–¥", callback_data="download_guide")]
])

subscribe_kb = KBM(inline_keyboard=[
    [KB(text="üîó –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è", url="https://t.me/+TcE_ofokV6RjM2Qy")],
    [KB(text="‚úÖ –ì–æ—Ç–æ–≤–æ", callback_data="check_sub")]
])

# Configure bot
logging.basicConfig(level=logging.INFO)
bot = Bot(BOT_TOKEN, default=DefaultBotProperties(parse_mode="HTML"))
dp = Dispatcher()

# Database functions
from database import add_user, get_all_ids, inc_stat, get_stats

# Helper: check channel subscription
async def is_member(uid: int) -> bool:
    member = await bot.get_chat_member(CHANNEL_ID, uid)
    return member.status in ("member", "administrator", "creator")

# /start
@dp.message(F.text == "/start")
async def cmd_start(m: Message):
    add_user(m.from_user.id)
    inc_stat("start")
    name = escape(m.from_user.first_name or m.from_user.username or "–¥—Ä—É–≥")
    caption = WELCOME_TEMPLATE.format(name=name)
    await m.answer_photo(
        photo=FSInputFile(os.path.join(IMAGE_DIR, "welcome.jpg")),
        caption=caption,
        reply_markup=inline_main_kb
    )

# Unified gift flow
async def send_gift_message(target, name):
    caption = GIFT_TEMPLATE.format(name=name)
    await target.answer_photo(
        photo=FSInputFile(os.path.join(IMAGE_DIR, "gift.jpg")),
        caption=caption,
        reply_markup=gift_kb
    )

async def send_subscribe_prompt(target):
    await target.answer_photo(
        photo=FSInputFile(os.path.join(IMAGE_DIR, "subscribe.jpg")),
        caption=SUBSCRIBE_PROMPT,
        reply_markup=subscribe_kb
    )

@dp.callback_query(F.data.in_(["gift", "check_sub"]))
async def gift_flow(c: CallbackQuery):
    await c.answer()
    inc_stat("gift_clicked")
    name = escape(c.from_user.first_name or c.from_user.username or "–¥—Ä—É–≥")
    if await is_member(c.from_user.id):
        inc_stat("gift_sent")
        await send_gift_message(c.message, name)
    else:
        await send_subscribe_prompt(c.message)

@dp.message(F.text == "/gift")
async def cmd_gift(m: Message):
    inc_stat("gift_clicked")
    name = escape(m.from_user.first_name or m.from_user.username or "–¥—Ä—É–≥")
    if await is_member(m.from_user.id):
        inc_stat("gift_sent")
        await send_gift_message(m, name)
    else:
        await send_subscribe_prompt(m)

# Download guide
@dp.callback_query(F.data == "download_guide")
async def download_guide(c: CallbackQuery):
    await c.answer()
    inc_stat("guide_downloaded")
    link_text = f"<a href=\"{GIFT_URL}\">–°–°–´–õ–ö–ê –ù–ê –ì–ê–ô–î</a>"
    await c.message.answer(
        "–ü–æ —Å—Å—ã–ª–∫–µ –≤–∞—Å –∂–¥—ë—Ç –º–æ–π –≥–∞–π–¥ –æ —Ç–æ–º, –∫–∞–∫ —Å –ø–æ–º–æ—â—å—é –ø—Ä–æ–¥—É–º–∞–Ω–Ω–æ–π —É–ø–∞–∫–æ–≤–∫–∏ –ø—Ä–∏–≤–ª–µ–∫–∞—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤.\n\n" +
        f"{link_text}\n" * 3 +
        "\n<b>–ó–∞–±–∏—Ä–∞–π—Ç–µ –∏ –¥–µ—Ä–∂–∏—Ç–µ –ø–æ–¥ —Ä—É–∫–æ–π ‚ö°Ô∏è</b>",
        disable_web_page_preview=True
    )

# Course handlers
async def send_course(target):
    await target.answer_photo(
        photo=FSInputFile(os.path.join(IMAGE_DIR, "course.jpg")),
        caption=COURSE_TEXT
    )

@dp.callback_query(F.data == "course")
async def course_cb(c: CallbackQuery):
    await c.answer()
    inc_stat("course_clicked")
    await send_course(c.message)

@dp.message(F.text == "/course")
async def cmd_course(m: Message):
    inc_stat("course_clicked")
    await send_course(m)

# Services handlers
async def format_services_text():
    items = "\n".join(SERVICES_ITEMS)
    return f"{SERVICES_HEADER}\n{items}{SERVICES_FOOTER}"

async def send_services(target):
    text = format_services_text()
    await target.answer_photo(
        photo=FSInputFile(os.path.join(IMAGE_DIR, "services.jpg")),
        caption=text
    )

@dp.callback_query(F.data == "services")
async def services_cb(c: CallbackQuery):
    await c.answer()
    inc_stat("services_clicked")
    await send_services(c.message)

@dp.message(F.text == "/services")
async def cmd_services(m: Message):
    inc_stat("services_clicked")
    await send_services(m)

# Stats
@dp.message(F.text == "/stats")
async def stats(m: Message):
    if m.from_user.id not in ADMIN_IDS:
        return
    data = get_stats()
    report = ["<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞:</b>\n"] + [f"{event}: {count}" for event, count in data.items()]
    await m.answer("\n".join(report))

# Broadcast FSM
class Announce(StatesGroup):
    wait = State()

@dp.message(F.text.startswith("/announce"))
async def ask_announce(m: Message, state: FSMContext):
    if m.from_user.id not in ADMIN_IDS:
        return
    await m.answer("–ü—Ä–∏—à–ª–∏—Ç–µ –æ–¥–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ-—à–∞–±–ª–æ–Ω. /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å.")
    await state.set_state(Announce.wait)

@dp.message(Announce.wait)
async def do_broadcast(m: Message, state: FSMContext):
    await state.clear()
    await m.answer("–†–∞—Å—Å—ã–ª–∞—é‚Ä¶")
    ok = err = 0
    for uid in get_all_ids():
        try:
            await m.copy_to(uid)
            ok += 1
            await asyncio.sleep(0.05)
        except TelegramRetryAfter as e:
            await asyncio.sleep(e.retry_after)
        except TelegramForbiddenError:
            err += 1
        except Exception:
            err += 1
    await m.answer(f"‚úÖ {ok} –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ, ‚ùå {err} –Ω–µ —É–¥–∞–ª–æ—Å—å")

@dp.message(F.text.lower() == "/cancel")
async def cancel(m: Message, state: FSMContext):
    if await state.get_state():
        await state.clear()
        await m.answer("–û—Ç–º–µ–Ω–µ–Ω–æ.")

# === ChannelMessage FSM for custom channel posts ===
class ChannelMessage(StatesGroup):
    wait = State()

@dp.message(F.text == "/chanel_massage")
async def ask_channel_message(m: Message, state: FSMContext):
    if m.from_user.id not in ADMIN_IDS:
        return
    await m.answer("–ü—Ä–∏—à–ª–∏—Ç–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ. /cancel ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å.")
    await state.set_state(ChannelMessage.wait)

@dp.message(ChannelMessage.wait)
async def send_channel_message(m: Message, state: FSMContext):
    text = m.text
    await state.clear()
    bot_user = await bot.get_me()
    bot_url = f"https://t.me/{bot_user.username}"
    kb = KBM(inline_keyboard=[
        [KB(text="üéÅ –ü–æ–¥–∞—Ä–æ–∫", url=bot_url)]
    ])
    await bot.send_message(
        chat_id=CHANNEL_ID,
        text=text,
        reply_markup=kb
    )
    await m.answer("‚úÖ –í–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –∫–∞–Ω–∞–ª.")

# Startup and main
def register_commands():
    return [
        BotCommand(command="start", description="–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –∏ –ø–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"),
        BotCommand(command="gift", description="–ü–æ–ª—É—á–∏—Ç—å –ø–æ–¥–∞—Ä–æ–∫-–≥–∞–π–¥"),
        BotCommand(command="course", description="–£–∑–Ω–∞—Ç—å –æ –º–∏–Ω–∏-–∫—É—Ä—Å–µ"),
        BotCommand(command="services", description="–£–∑–Ω–∞—Ç—å –æ–± —É—Å–ª—É–≥–∞—Ö")
    ]

async def on_startup():
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.set_my_commands(register_commands())

async def main():
    await on_startup()
    try:
        await dp.start_polling(bot)
    finally:
        from database import engine
        engine.dispose()

if __name__ == "__main__":
    asyncio.run(main())
